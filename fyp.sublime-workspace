{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"sym",
				"symbols"
			],
			[
				"time",
				"timedelta	class"
			],
			[
				"y",
				"year	forflow"
			],
			[
				"left",
				"left_on"
			],
			[
				"margin",
				"margin"
			],
			[
				"tex",
				"text-decoration"
			],
			[
				"de",
				"deQueue"
			],
			[
				"Q",
				"Queue"
			],
			[
				"E",
				"EmptyQueue"
			],
			[
				"is",
				"isEmptyQueue"
			],
			[
				"empt",
				"emptyQueue"
			],
			[
				"ins",
				"insertIf"
			],
			[
				"in",
				"insertIf"
			],
			[
				"sub",
				"subscribe"
			],
			[
				"prog",
				"programme"
			],
			[
				"pro",
				"programme"
			],
			[
				"to",
				"toDate"
			],
			[
				"for",
				"for	for (…) {…}"
			],
			[
				"tod",
				"today"
			],
			[
				"last",
				"lastParsedDate"
			],
			[
				"sta",
				"stats	module"
			],
			[
				"try",
				"try	Try/Except"
			],
			[
				"yea",
				"years	statement"
			],
			[
				"retr",
				"returns	statement"
			],
			[
				"ret",
				"returns	statement"
			],
			[
				"symbo",
				"symbols	statement"
			],
			[
				"data",
				"dataFile	statement"
			],
			[
				"nex",
				"nextPoint	function"
			],
			[
				"star",
				"startPoints	statement"
			],
			[
				"iter",
				"iterate	function"
			],
			[
				"def",
				"def	Function"
			],
			[
				"__",
				"__class__	class"
			],
			[
				"grid",
				"grid_dict	param"
			],
			[
				"gri",
				"grid_str	param"
			],
			[
				"wind",
				"window_diffs	statement"
			],
			[
				"wi",
				"windows	function"
			],
			[
				"hid",
				"hiddenLayer1	statement"
			],
			[
				"train",
				"trainer	statement"
			],
			[
				"per",
				"diff_percent"
			],
			[
				"diff",
				"diff_percent	function"
			],
			[
				"input",
				"input_size	statement"
			],
			[
				"win",
				"window	forflow"
			],
			[
				"windo",
				"window_size	statement"
			],
			[
				"this",
				"thisTime"
			],
			[
				"mome",
				"momentTime"
			],
			[
				"font",
				"font-size"
			],
			[
				"marg",
				"margin-right"
			],
			[
				"text",
				"text-decoration"
			],
			[
				"mes",
				"messageText"
			],
			[
				"mar",
				"margin-bottom"
			],
			[
				"inlin",
				"inline-block"
			],
			[
				"add",
				"addProgrammesForDate"
			],
			[
				"date",
				"date"
			],
			[
				"get",
				"getProgrammes"
			],
			[
				"newpr",
				"new_programmes"
			],
			[
				"prg",
				"programmes"
			],
			[
				"no",
				"nowrap"
			],
			[
				"back",
				"background-color"
			],
			[
				"ine",
				"inline-block"
			],
			[
				"chan",
				"channelid"
			],
			[
				"channel",
				"ChannelSchedule"
			],
			[
				"new",
				"newProgramme"
			],
			[
				"sch",
				"scheduleLen"
			],
			[
				"stat",
				"status"
			]
		]
	},
	"buffers":
	[
	],
	"build_system": "Packages/User/anaconda-distribution.sublime-build",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 140.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"theme",
				"Colorsublime: Install Theme"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"",
				"Anaconda: Autoformat PEP8 Errors"
			],
			[
				"pep8",
				"Anaconda: Autoformat PEP8 Errors"
			]
		],
		"width": 457.0
	},
	"console":
	{
		"height": 200.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = 'eb2297e1a458f27d836c04bb0cbaf282' + 'd0e7a3098092775ccb37ca9d6b2e4b7d'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)",
			"import urllib.request,os,hashlib; h = '2deb499853c4371624f5a07e27c334aa' + 'bf8c4e67d14fb0525ba4f89698a6d7e1'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by) "
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
	],
	"file_history":
	[
		"/home/mark/workspace/final-year-project/report/report2/report2.bib",
		"/home/mark/workspace/final-year-project/work/machines/plot_learning_curve.py",
		"/home/mark/workspace/final-year-project/work/machines/knn-model-selection.py",
		"/home/mark/workspace/final-year-project/work/common.py",
		"/home/mark/workspace/final-year-project/data/disaster-table.html",
		"/home/mark/workspace/final-year-project/work/fundamentals/analysis_absolute.py",
		"/home/mark/workspace/misc/temp2.csv",
		"/home/mark/workspace/misc/temp.csv",
		"/home/mark/.config/sublime-text-3/Packages/Default/Default (Linux).sublime-keymap",
		"/home/mark/.config/sublime-text-3/Packages/User/Default (Linux).sublime-keymap",
		"/home/mark/workspace/final-year-project/work/neural-nets/net-test.py",
		"/home/mark/workspace/final-year-project/work/neural-nets/neural-net.py",
		"/home/mark/workspace/final-year-project/work/before-xmas/week5/gain_loss_asymmetry.py",
		"/home/mark/workspace/misc/echonest/fund-ad.json",
		"/home/mark/workspace/final-year-project/report/report2/report2.tex",
		"/home/mark/.config/sublime-text-3/Packages/WordCount/WordCount.sublime-settings",
		"/home/mark/workspace/final-year-project/work/machines/plot_learning_curve.pyc",
		"/home/mark/Desktop/test.hs",
		"/home/mark/.config/sublime-text-3/Packages/Anaconda/Anaconda.sublime-settings",
		"/home/mark/workspace/meteor/rabble/.meteor/local/build/programs/server/npm/mongo/node_modules/mongodb/docs/sphinx-docs/themes/mongodb/theme.conf",
		"/home/mark/workspace/meteor/rabble/packages/npm-container/.build.npm-container/npm/node_modules/cheerio/node_modules/htmlparser2/test/test-helper.js",
		"/home/mark/workspace/final-year-project/todo",
		"/home/mark/.config/sublime-text-3/Packages/User/Preferences.sublime-settings",
		"/home/mark/workspace/meteor/rabble/packages.json",
		"/home/mark/workspace/final-year-project/data/fundamentals/pb_abs_returns.csv",
		"/home/mark/.config/sublime-text-3/Packages/Default/Preferences.sublime-settings",
		"/home/mark/workspace/final-year-project/work/fundamentals/analysis_deltas.py",
		"/home/mark/workspace/final-year-project/work/fundamentals/combine_deltas.py",
		"/home/mark/workspace/final-year-project/work/fundamentals/combine_pb_abs.py",
		"/home/mark/workspace/final-year-project/work/fundamentals/combine_absolute.py",
		"/home/mark/workspace/final-year-project/work/fundamentals/pe_data.py",
		"/home/mark/Desktop/tesst.rb",
		"/home/mark/workspace/misc/lichess-player-ratings/lichess-player-ratings.py",
		"/home/mark/anaconda/lib/python2.7/site-packages/pandas/tools/merge.py",
		"/home/mark/anaconda/lib/python2.7/site-packages/pandas/tools/merge.pyc",
		"/home/mark/anaconda/lib/python2.7/site-packages/pandas/core/common.py",
		"/home/mark/workspace/markdunne.github.io/index.html",
		"/home/mark/workspace/markdunne.github.io/_posts/2015-02-08-Inauguration Address Generator.html",
		"/home/mark/workspace/markdunne.github.io/_layouts/default.html",
		"/home/mark/workspace/markdunne.github.io/_includes/head.html",
		"/home/mark/workspace/markdunne.github.io/public/css/styles.css",
		"/home/mark/workspace/markdunne.github.io/404.html",
		"/home/mark/workspace/markdunne.github.io/_config.yml",
		"/home/mark/workspace/markdunne.github.io/_layouts/post.html",
		"/home/mark/Desktop/temp.py",
		"/home/mark/workspace/final-year-project/work/machines/data-grabber.py",
		"/home/mark/workspace/cs4621/Queue.hs",
		"/home/mark/workspace/cs4621/Set.hs",
		"/home/mark/workspace/cs4621/SET.hs",
		"/home/mark/workspace/markdunne.github.io/public/css/hyde.css",
		"/home/mark/workspace/markdunne.github.io/_includes/sidebar.html",
		"/home/mark/workspace/markdunne.github.io/_posts/2015-01-31-test-post.md",
		"/home/mark/workspace/meteor/rabble/.meteor/local/build/programs/server/node_modules/node-inspector/front-end/CallStackSidebarPane.js",
		"/home/mark/workspace/final-year-project/CacheSetup.py",
		"/home/mark/workspace/markdunne.github.io/CNAME",
		"/home/mark/workspace/meteor/rabble/.meteor/local/build/programs/server/node_modules/node-inspector/front-end/sidebarPane.css",
		"/home/mark/workspace/meteor/rabble/.meteor/local/build/programs/server/node_modules/phantomjs/node_modules/unzip/node_modules/setimmediate/setImmediate.js",
		"/home/mark/workspace/final-year-project/work/fundamentals/combine.py",
		"/home/mark/workspace/meteor/rabble/rabble.js",
		"/home/mark/workspace/meteor/rabble/rabble.html",
		"/home/mark/workspace/meteor/rabble/server/lib/schedule.js",
		"/home/mark/workspace/final-year-project/work/fundamentals/analysis.py",
		"/home/mark/workspace/misc/sodoku.py",
		"/home/mark/workspace/misc/attractor.py",
		"/home/mark/workspace/final-year-project/fyp.sublime-project",
		"/home/mark/workspace/final-year-project/work/neural-nets/error-plot.py",
		"/home/mark/.config/sublime-text-3/Packages/User/anaconda-distribution.sublime-build",
		"/home/mark/.config/sublime-text-3/Packages/Anaconda/Default (Linux).sublime-keymap",
		"/home/mark/workspace/final-year-project/data/ibm.csv",
		"/home/mark/workspace/meteor/rabble/rabble.css",
		"/home/mark/Downloads/Anaconda-2.1.0-Linux-x86.sh",
		"/home/mark/workspace/meteor/rabble/server/schedule.js",
		"/home/mark/workspace/meteor/bitbet/bitbet.html",
		"/home/mark/workspace/meteor/bitbet/bitbet.js",
		"/home/mark/workspace/meteor/bitbet/lib/methods.js",
		"/home/mark/workspace/meteor/bitbet/lib/collections.js"
	],
	"find":
	{
		"height": 38.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
			"/home/mark/workspace/markdunne.github.io",
			"/home/mark/workspace/meteor/rabble/",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"–",
			" ",
			"shift",
			"ctrl+alt",
			"select",
			"&",
			"0",
			"w2 =",
			"w1 =",
			"w0 =",
			"			",
			"6}",
			"\\cline{3-6}",
			"},\n\n",
			"},",
			"short_ma",
			"graph",
			">>> ",
			"accuracy",
			"kfold_for_regression",
			"mean_squared_error",
			"KNeighborsRegressor",
			"length",
			"/*",
			"length",
			"ignore",
			"ignored",
			"pe",
			"returns",
			"pe_returns",
			"P.",
			"x-grid-cell-gridcolumn-1029",
			"x-grid-cell-gridcolumn-1028",
			"x-grid-cell-gridcolumn-1029",
			"\\n\",",
			"+      \"",
			"datetime",
			"<string name=",
			"<string name=\"rejection1\">",
			"</>",
			"Rejection",
			" – ",
			"[Special] ",
			"* ",
			"<fav>",
			"error",
			"{",
			"left_on)",
			"left_on",
			"_validate_specification",
			"left_on",
			"(left_on) must equal the n",
			" = []",
			"# In",
			"user_perfs",
			"user_prefs",
			"user_pefs",
			":{\"games",
			"print(",
			"slow",
			")",
			" \\",
			"elem",
			"a",
			"(\\",
			"elem",
			"node",
			"related_posts",
			"related_potss",
			"related posts",
			"repo",
			"3",
			".name",
			"lastParsedDate",
			"date",
			"3",
			"\"",
			".Data",
			"Data",
			"df",
			", parse_dates=False",
			" parse_dates=False",
			"pe_save_loc",
			"stock_symbol",
			"line-length",
			"auto",
			"phase_constant",
			"probs",
			"max",
			"Total error: ",
			"Total error:",
			"30",
			"window_size - 2",
			"window",
			"trndata",
			"tstdata",
			"Total error: ",
			"mpl",
			"Total error: ",
			"Total error",
			">>>",
			">>> ",
			"auto_complete",
			"interpre",
			"list",
			"programme",
			"moment(",
			"console.log",
			");\n",
			"content",
			"'",
			"p",
			"tomorrowsDate",
			"tomorrow",
			"monday",
			"date",
			"monday",
			"newProgramme",
			"ChannelSchedule",
			"programmes",
			"channelid",
			"=",
			"ChannelSchedule",
			"channelschedule",
			"ChannelSchedule",
			"<option value=\"\">",
			"channl",
			"programme"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
			]
		}
	],
	"incremental_find":
	{
		"height": 25.0
	},
	"input":
	{
		"height": 33.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 203.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "fyp.sublime-project",
	"replace":
	{
		"height": 64.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 251.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
