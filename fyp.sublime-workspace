{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"left",
				"left_on"
			],
			[
				"margin",
				"margin"
			],
			[
				"tex",
				"text-decoration"
			],
			[
				"de",
				"deQueue"
			],
			[
				"Q",
				"Queue"
			],
			[
				"E",
				"EmptyQueue"
			],
			[
				"is",
				"isEmptyQueue"
			],
			[
				"empt",
				"emptyQueue"
			],
			[
				"ins",
				"insertIf"
			],
			[
				"in",
				"insertIf"
			],
			[
				"sub",
				"subscribe"
			],
			[
				"prog",
				"programme"
			],
			[
				"pro",
				"programme"
			],
			[
				"to",
				"toDate"
			],
			[
				"for",
				"for	for (…) {…}"
			],
			[
				"tod",
				"today"
			],
			[
				"last",
				"lastParsedDate"
			],
			[
				"sta",
				"stats	module"
			],
			[
				"try",
				"try	Try/Except"
			],
			[
				"yea",
				"years	statement"
			],
			[
				"retr",
				"returns	statement"
			],
			[
				"ret",
				"returns	statement"
			],
			[
				"sym",
				"symbol	forflow"
			],
			[
				"symbo",
				"symbols	statement"
			],
			[
				"data",
				"dataFile	statement"
			],
			[
				"nex",
				"nextPoint	function"
			],
			[
				"star",
				"startPoints	statement"
			],
			[
				"iter",
				"iterate	function"
			],
			[
				"def",
				"def	Function"
			],
			[
				"__",
				"__class__	class"
			],
			[
				"grid",
				"grid_dict	param"
			],
			[
				"gri",
				"grid_str	param"
			],
			[
				"wind",
				"window_diffs	statement"
			],
			[
				"wi",
				"windows	function"
			],
			[
				"hid",
				"hiddenLayer1	statement"
			],
			[
				"train",
				"trainer	statement"
			],
			[
				"per",
				"diff_percent"
			],
			[
				"diff",
				"diff_percent	function"
			],
			[
				"input",
				"input_size	statement"
			],
			[
				"win",
				"window	forflow"
			],
			[
				"windo",
				"window_size	statement"
			],
			[
				"this",
				"thisTime"
			],
			[
				"mome",
				"momentTime"
			],
			[
				"time",
				"timeStr"
			],
			[
				"font",
				"font-size"
			],
			[
				"marg",
				"margin-right"
			],
			[
				"text",
				"text-decoration"
			],
			[
				"mes",
				"messageText"
			],
			[
				"mar",
				"margin-bottom"
			],
			[
				"inlin",
				"inline-block"
			],
			[
				"add",
				"addProgrammesForDate"
			],
			[
				"date",
				"date"
			],
			[
				"get",
				"getProgrammes"
			],
			[
				"newpr",
				"new_programmes"
			],
			[
				"prg",
				"programmes"
			],
			[
				"no",
				"nowrap"
			],
			[
				"back",
				"background-color"
			],
			[
				"ine",
				"inline-block"
			],
			[
				"chan",
				"channelid"
			],
			[
				"channel",
				"ChannelSchedule"
			],
			[
				"new",
				"newProgramme"
			],
			[
				"sch",
				"scheduleLen"
			],
			[
				"stat",
				"status"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "chess960.append(int(user_perfs['chess960']['rating']))\nblitz.append(int(user_perfs['blitz']['rating']))\nkingOfTheHill.append(int(user_perfs['kingOfTheHill']['rating']))\nthreeCheck.append(int(user_perfs['threeCheck']['rating']))\nantichess.append(int(user_perfs['antichess']['rating']))\nbullet.append(int(user_perfs['bullet']['rating']))\ncorrespondence.append(int(user_perfs['correspondence']['rating']))\npuzzle.append(int(user_perfs['puzzle']['rating']))\natomic.append(int(user_perfs['atomic']['rating']))\nopening.append(int(user_perfs['opening']['rating']))\nclassical.append(int(user_perfs['classical']['rating']))",
			"settings":
			{
				"buffer_size": 614,
				"line_ending": "Unix",
				"name": "chess960.append(int(user_perfs['chess960']['rating"
			}
		},
		{
			"file": "/home/mark/workspace/misc/lichess-player-ratings/lichess-player-ratings.py",
			"settings":
			{
				"buffer_size": 1813,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/mark/anaconda/lib/python2.7/site-packages/pandas/tools/merge.py",
			"settings":
			{
				"buffer_size": 39848,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "# Put any initialization logic here.  The context object will be passed to\n# the other methods in your algorithm.\ndef initialize(context):\n    context.stocks = [ sid(8554),  # SPY: S&P 500  \n                       sid(2174),  # DIA: Dow Jones  \n                       sid(19920), # QQQ: NASDAQ 100  \n                       sid(21507), # IJH: S&P MidCap 400  \n                       sid(33486), # VEU: Ex-US  \n                       sid(27102), # VWO: FTSE Emerging  \n                       sid(33748), # RSX: Russia  \n                       sid(14523), # EWM: Malaysia  \n                       sid(35793), # EPI: India  \n                       sid(35975), # TUR: Turkey                             \n                       sid(35084), # BKF: BRIC \n                     ] \n\n# Will be called on every trade event for the securities you specify. \ndef handle_data(context, data):\n    # Implement your algorithm logic here.\n\n    # data[sid(X)] holds the trade event data for that security.\n    # context.portfolio holds the current portfolio state.\n\n    # Place orders with the order(SID, amount) method.\n\n    # TODO: implement your own logic here.\n    order(sid(24), 50)   \n    log.info('available funds: ' + str(  context.account.available_funds))\n",
			"settings":
			{
				"buffer_size": 1244,
				"line_ending": "Unix",
				"name": "# Put any initialization logic here.  The context"
			}
		},
		{
			"contents": "# Put any initialization logic here.  The context object will be passed to\n# the other methods in your algorithm.\nimport numpy as np\nfrom itertools import chain, combinations\nfrom scipy.spatial.distance import euclidean\n\nstock_list = [\n	symbol('AXP'),\n	symbol('BA'),\n	symbol('CAT'),\n	symbol('CSCO'),\n	symbol('CVX'),\n	symbol('DD'),\n	symbol('DIS'),\n	symbol('GE'),\n    sid(20088), #gs\n	symbol('HD'),\n	symbol('IBM'),\n	symbol('INTC'),\n	symbol('JNJ'),\n	symbol('JPM'),\n	symbol('KO'),\n	symbol('MCD'),\n	symbol('MMM'),\n	symbol('MRK'),\n	symbol('MSFT'),\n	symbol('NKE'),\n	symbol('PFE'),\n	symbol('PG'),\n	sid(6653), #at&t\n	sid(7041), #travelers\n	symbol('UNH'),\n	symbol('UTX'),\n	sid(35920), #visa\n	symbol('VZ'),\n	symbol('WMT'),\n	symbol('XOM'),   \n]\ndef powerset(iterable):\n    \"powerset([1,2,3]) --> () (1,) (2,) (3,) (1,2) (1,3) (2,3) (1,2,3)\"\n    s = list(iterable)\n    p = chain.from_iterable(combinations(s, r) for r in range(len(s)+1))\n    return map(list, p)\n\ndef initialize(context): \n    context.stocks = stock_list\n    context.best_weights = []    \n    \n    \ndef loss_func(x, y):\n    min_dist = euclidean((x[0], y[0]), (x[-1], y[-1]))\n    actual_dist = 0.0\n    assert len(x) == len(y), \"x and y different lengths\"\n    for i in range(1, len(x)):\n         actual_dist += euclidean((x[i], y[i]), (x[i-1], y[i-1]))\n    \n    slope = (y[-1] - y[0]) / (x[-i] - x[0])    \n    return (min_dist / actual_dist)# * slope\n    \ndef find_minima(context, price_history, iterations = 100):        \n    best_score = 0\n    \n    X = np.arange(len(price_history))\n    \n    #try to reuse last weights\n    if len(context.best_weights) != 0:\n        y = (price_history * context.best_weights).sum(axis=1)\n        best_score = loss_func(X, y)\n    else:\n        #lots of iterations the first time\n        log.info('first iteration')\n        iterations = 1000\n        \n    \n    for i in range(iterations):\n        weights = np.random.beta(.3, .3, size=len(stock_list))\n        weights /= weights.sum()\n        \n        y = (price_history * weights).sum(axis=1)\n        score = loss_func(X, y)\n        \n        if score > best_score:\n            best_score = score\n            context.best_weights = weights    \n\n    log.info('score: ' + str(best_score))\n    return score, zip(price_history.columns, context.best_weights)\n            \n    \n# Will be called on every trade event for the securities you specify. \ndef handle_data(context, data):\n    #train on last n moments\n    #test on today    \n    \n    price_history = history(bar_count=20, frequency='1d', field='price')\n    score, weights = find_minima(context, price_history)\n    # simple_weights = map(lambda (s, w): (s.symbol, w), weights)\n    \n    for symbol, weight in weights:\n        order_target_percent(symbol, weight)\n    \n    \n    \n",
			"settings":
			{
				"buffer_size": 2761,
				"line_ending": "Unix",
				"name": "# Put any initialization logic here.  The context"
			}
		},
		{
			"contents": "<item>Borrow $100 from a Stranger</item>\n<item>Request a “Burger Refill”</item>\n<item>Ask For Olympic Symbol Doughnuts</item>\n<item>Deliver Pizza for Domino’s</item>\n<item>Have a Tour in a Grocery Store Warehouse</item>\n<item>Play Soccer in Someone’s Backyard</item>\n<item>Speak Over Costco’s Intercom</item>\n<item>Get Number One Spot in Best Buy’s Thanksgiving Line</item>\n<item>Send Stuff to Santa Claus Through Fedex</item>\n<item>Listen to Happy Birthday Song When It’s Not My Birthday</item>\n<item>Learn Sales From the #2 Car Salesman in the Country</item>\n<item>Ask Jackie to Talk to Millions of People</item>\n<item>Take an Unregistered Exam</item>\n<item>Give $5 to Five Random People</item>\n<item>Be a Live Mannequin at Abercrombie</item>\n<item>Ring a Bell for the Salvation Army</item>\n<item>Borrow a Dog From the Humane Society</item>\n<item>Give Weather Forecast on Live TV</item>\n<item>Make Announcement on a Southwest Flight</item>\n<item>Have Jeff Probst Sing a Song to My Son</item>\n<item>Ask Strangers for Compliments</item>\n<item>Get “Thai Torture” at Amy’s Ice Creams</item>\n<item>Be a Greeter at Starbucks</item>\n<item>Exchange Training With a Personal Trainer</item>\n<item>Dance With a Dancing Santa</item>\n<item>Give a Lecture to College Student</item>\n<item>Get Donation For Charity on The Street</item>\n<item>Make a Sale For Best Buy</item>\n<item>Learn Making Chai Tea From Barista</item>\n<item>Slide Down the Firepole at a Firestation</item>\n<item>Be a Santa to a Santa</item>\n<item>Get a Free Room at a Hotel</item>\n<item>Grill My Own Meat at Salt Lick</item>\n<item>Find a Job in One Day</item>\n<item>Ask a Girl Out to Dinner</item>\n<item>Trim My Hair at PetSmart</item>\n<item>Dry-clean My Tire</item>\n<item>Challenge a CEO to a Staring Contest</item>\n<item>Race a Random Person</item>\n<item>Partner Up to Buy Lottery</item>\n<item>Sit in Police Car’s Driver Seat</item>\n<item>Write an Article for Businessweek</item>\n<item>Hug a Walmart Greeter</item>\n<item>Dance on Security Camera</item>\n<item>Put Sunglasses on Random People</item>\n<item>Borrow $100 Bills From Bank for Paper Plane Fight</item>\n<item>Pump Gas for Strangers</item>\n<item>Bike Race at Toys R Us</item>\n<item>Interview a Panhandler</item>\n<item>My Only Day at New Job</item>\n<item>Make My Own Sandwich at Subway</item>\n<item>Be Like a Southwest Pilot</item>\n<item>Ask Zappos Employees to Gangnam Style</item>\n<item>Dance With My Waitress</item>\n<item>Get a Private Jet Ride From Tony Hsieh</item>\n<item>Attend a Random Superbowl Party</item>\n<item>Buy Quarter of a Shrimp</item>\n<item>Name My Own Price at Dollar Tree</item>\n<item>Set Up a Printer Stand at Starbucks</item>\n<item>My First College Lecture</item>\n<item>Plant a Flower In Someone’s Yard</item>\n<item>Sell Cookies for the Girl Scouts</item>\n<item>Evil Queen and the Six Snow Whites</item>\n<item>Work at a Whataburger Drive-Through</item>\n<item>Sleep at Mattress Firm</item>\n<item>Rejection for Everyone</item>\n<item>Observe a Highschool Class</item>\n<item>Exchange Secrets with Strangers</item>\n<item>Buy Fresh Fruit at Jamba Juice</item>\n<item>Get a Discount at Target</item>\n<item>Change Coffee Shop’s WIFI Password</item>\n<item>Be The Worst Salesman Possible</item>\n<item>Learn Spanish at Supermarket</item>\n<item>Hire a Job Seeker On the Spot</item>\n<item>Make Pie with My Own Ingredients</item>\n<item>Get a Live Interview on Radio</item>\n<item>Fix a PC at the Apple Store</item>\n<item>What Happens When Trying to Feed a Lion</item>\n<item>McDonald’s Challenge (Afternoon McGriddle)</item>\n<item>Test Drive an Expensive Car</item>\n<item>Be a Tour Guide at Museum</item>\n<item>Sit On Lincoln’s Lap… and More</item>\n<item>Exchange Rejection for Smile in DC</item>\n<item>Draw Portrait of Strangers (with Dom Rabrun)</item>\n<item>Rejections in a New York Minute</item>\n<item>Pictures with Strangers</item>\n<item>SkyJump off a Building (rejecting my fear)</item>\n<item>Play Rock Paper Scissors Lizard Spock with a Stranger</item>\n<item>Skate at Sonic</item>\n<item>Get a Ride on a Bucket Truck</item>\n<item>Learn a Martial Arts Master’s Favorite Move</item>\n<item>Fly a Gyroplane</item>\n<item>Play Pick-Up Line Tournament With Random Ladies</item>\n<item>Grow a Dollar 10 Times</item>\n<item>Borrow a Book From Barnes & Noble</item>\n<item>Interviewing a Female Bodybuilder</item>\n<item>Give a Speech on the Street</item>\n<item>Take a Tour Underneath a Plane</item>\n<item>Ask Strangers to Rate My Look</item>\n<item>Interview President Obama</item>",
			"settings":
			{
				"buffer_size": 4492,
				"line_ending": "Unix",
				"name": "<item>Borrow $100 from a Stranger</item>"
			}
		}
	],
	"build_system": "Packages/User/anaconda-distribution.sublime-build",
	"command_palette":
	{
		"height": 392.0,
		"selected_items":
		[
			[
				"",
				"Anaconda: Autoformat PEP8 Errors"
			],
			[
				"pep8",
				"Anaconda: Autoformat PEP8 Errors"
			],
			[
				"install",
				"Package Control: Install Package"
			]
		],
		"width": 449.0
	},
	"console":
	{
		"height": 139.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '2deb499853c4371624f5a07e27c334aa' + 'bf8c4e67d14fb0525ba4f89698a6d7e1'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by) "
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/mark/workspace/meteor/rabble",
		"/home/mark/workspace/markdunne.github.io",
		"/home/mark/workspace/markdunne.github.io/_includes",
		"/home/mark/workspace/markdunne.github.io/_layouts",
		"/home/mark/workspace/markdunne.github.io/_posts",
		"/home/mark/workspace/markdunne.github.io/public",
		"/home/mark/workspace/markdunne.github.io/public/css"
	],
	"file_history":
	[
		"/home/mark/anaconda/lib/python2.7/site-packages/pandas/tools/merge.pyc",
		"/home/mark/anaconda/lib/python2.7/site-packages/pandas/core/common.py",
		"/home/mark/workspace/markdunne.github.io/index.html",
		"/home/mark/workspace/markdunne.github.io/_posts/2015-02-08-Inauguration Address Generator.html",
		"/home/mark/workspace/markdunne.github.io/_layouts/default.html",
		"/home/mark/workspace/markdunne.github.io/_includes/head.html",
		"/home/mark/workspace/markdunne.github.io/public/css/styles.css",
		"/home/mark/workspace/markdunne.github.io/404.html",
		"/home/mark/workspace/markdunne.github.io/_config.yml",
		"/home/mark/workspace/markdunne.github.io/_layouts/post.html",
		"/home/mark/Desktop/temp.py",
		"/home/mark/workspace/final-year-project/work/machines/plot_learning_curve.py",
		"/home/mark/workspace/final-year-project/work/machines/data-grabber.py",
		"/home/mark/.config/sublime-text-3/Packages/Anaconda/Anaconda.sublime-settings",
		"/home/mark/workspace/final-year-project/work/fundamentals/pe_data.py",
		"/home/mark/workspace/cs4621/Queue.hs",
		"/home/mark/workspace/cs4621/Set.hs",
		"/home/mark/workspace/cs4621/SET.hs",
		"/home/mark/workspace/markdunne.github.io/public/css/hyde.css",
		"/home/mark/workspace/markdunne.github.io/_includes/sidebar.html",
		"/home/mark/workspace/markdunne.github.io/_posts/2015-01-31-test-post.md",
		"/home/mark/workspace/meteor/rabble/.meteor/local/build/programs/server/node_modules/node-inspector/front-end/CallStackSidebarPane.js",
		"/home/mark/workspace/final-year-project/CacheSetup.py",
		"/home/mark/workspace/markdunne.github.io/CNAME",
		"/home/mark/workspace/meteor/rabble/.meteor/local/build/programs/server/node_modules/node-inspector/front-end/sidebarPane.css",
		"/home/mark/workspace/meteor/rabble/.meteor/local/build/programs/server/node_modules/phantomjs/node_modules/unzip/node_modules/setimmediate/setImmediate.js",
		"/home/mark/workspace/final-year-project/work/fundamentals/combine.py",
		"/home/mark/workspace/meteor/rabble/rabble.js",
		"/home/mark/workspace/meteor/rabble/rabble.html",
		"/home/mark/workspace/meteor/rabble/server/lib/schedule.js",
		"/home/mark/workspace/final-year-project/work/fundamentals/analysis.py",
		"/home/mark/workspace/misc/sodoku.py",
		"/home/mark/workspace/misc/attractor.py",
		"/home/mark/workspace/final-year-project/work/neural-nets/neural-net.py",
		"/home/mark/workspace/final-year-project/work/neural-nets/net-test.py",
		"/home/mark/workspace/final-year-project/fyp.sublime-project",
		"/home/mark/workspace/final-year-project/work/neural-nets/error-plot.py",
		"/home/mark/.config/sublime-text-3/Packages/Default/Default (Linux).sublime-keymap",
		"/home/mark/.config/sublime-text-3/Packages/User/anaconda-distribution.sublime-build",
		"/home/mark/.config/sublime-text-3/Packages/Anaconda/Default (Linux).sublime-keymap",
		"/home/mark/workspace/final-year-project/data/ibm.csv",
		"/home/mark/workspace/meteor/rabble/packages.json",
		"/home/mark/workspace/meteor/rabble/rabble.css",
		"/home/mark/Downloads/Anaconda-2.1.0-Linux-x86.sh",
		"/home/mark/workspace/meteor/rabble/server/schedule.js",
		"/home/mark/workspace/meteor/bitbet/bitbet.html",
		"/home/mark/workspace/meteor/bitbet/bitbet.js",
		"/home/mark/workspace/meteor/bitbet/lib/methods.js",
		"/home/mark/workspace/meteor/bitbet/lib/collections.js"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
			"/home/mark/workspace/markdunne.github.io",
			"/home/mark/workspace/meteor/rabble/",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"<string name=",
			"<string name=\"rejection1\">",
			"</>",
			"Rejection",
			" – ",
			"[Special] ",
			"* ",
			"<fav>",
			"error",
			"{",
			"left_on)",
			"left_on",
			"_validate_specification",
			"left_on",
			"(left_on) must equal the n",
			" = []",
			"# In",
			"user_perfs",
			"user_prefs",
			"user_pefs",
			":{\"games",
			"print(",
			"slow",
			")",
			" \\",
			"elem",
			"a",
			"(\\",
			"elem",
			"node",
			"related_posts",
			"related_potss",
			"related posts",
			"repo",
			"3",
			".name",
			"lastParsedDate",
			"date",
			"3",
			"\"",
			".Data",
			"Data",
			"df",
			", parse_dates=False",
			" parse_dates=False",
			"pe_save_loc",
			"stock_symbol",
			"line-length",
			"auto",
			"phase_constant",
			"probs",
			"max",
			"Total error: ",
			"Total error:",
			"30",
			"window_size - 2",
			"window",
			"trndata",
			"tstdata",
			"Total error: ",
			"mpl",
			"Total error: ",
			"Total error",
			">>>",
			">>> ",
			"auto_complete",
			"interpre",
			"list",
			"programme",
			"moment(",
			"console.log",
			");\n",
			"content",
			"'",
			"p",
			"tomorrowsDate",
			"tomorrow",
			"monday",
			"date",
			"monday",
			"newProgramme",
			"ChannelSchedule",
			"programmes",
			"channelid",
			"=",
			"ChannelSchedule",
			"channelschedule",
			"ChannelSchedule",
			"<option value=\"\">",
			"channl",
			"programme",
			"cheerio",
			"Schedule",
			"console.log(",
			"var",
			"wscraper",
			"request",
			"repeat"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 5,
			"sheets":
			[
				{
					"buffer": 0,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 614,
						"regions":
						{
						},
						"selection":
						[
							[
								54,
								54
							],
							[
								103,
								103
							],
							[
								168,
								168
							],
							[
								227,
								227
							],
							[
								284,
								284
							],
							[
								335,
								335
							],
							[
								402,
								402
							],
							[
								453,
								453
							],
							[
								504,
								504
							],
							[
								557,
								557
							],
							[
								614,
								614
							]
						],
						"settings":
						{
							"auto_name": "chess960.append(int(user_perfs['chess960']['rating",
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/home/mark/workspace/misc/lichess-player-ratings/lichess-player-ratings.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1813,
						"regions":
						{
						},
						"selection":
						[
							[
								321,
								321
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": -0.0,
						"translation.y": 153.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "/home/mark/anaconda/lib/python2.7/site-packages/pandas/tools/merge.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 39848,
						"regions":
						{
						},
						"selection":
						[
							[
								6093,
								6093
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2418.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 3,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1244,
						"regions":
						{
						},
						"selection":
						[
							[
								1244,
								1244
							]
						],
						"settings":
						{
							"auto_name": "# Put any initialization logic here.  The context",
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 4,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2761,
						"regions":
						{
						},
						"selection":
						[
							[
								2129,
								2129
							]
						],
						"settings":
						{
							"auto_name": "# Put any initialization logic here.  The context",
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 825.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 5,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4492,
						"regions":
						{
						},
						"selection":
						[
							[
								653,
								653
							]
						],
						"settings":
						{
							"auto_name": "<item>Borrow $100 from a Stranger</item>",
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 25.0
	},
	"input":
	{
		"height": 33.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 266.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"project": "fyp.sublime-project",
	"replace":
	{
		"height": 64.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 302.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
